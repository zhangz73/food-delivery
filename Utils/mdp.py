import numpy as np
import pandas as pd
import torch

class SimEnv:
    def __init__(self):
        pass
    
    ## Calibrate all system parameters from Meituan dataset
    def calibrate_parameters(self):
        pass
    
    def get_time_horizon(self):
        pass
    
    def get_node_set(self):
        pass
    
    def get_edge_length(self, node1, node2):
        pass
    
    def get_all_edges_lengths(self):
        pass
    
    def get_edge_travel_time(self, node1, node2, time):
        pass
    
    def get_restaurant_service_rate(self, restaurant_node):
        pass
    
    def get_order_arrival_rate(self, restaurant_node, customer_node, time):
        pass
    
    def get_order_delivery_ddl(self, restaurant_node, customer_node, time):
        pass
    
    def get_parttime_courier_arrival_rate(self, node, time):
        pass
    
    def get_rejection_rate(self, da_id, time):
        pass

def CourierTask:
    def __init__(self):
        pass
    
    ## Possible types: Pickup order, deliver order
    ## If the task is to pickup an order and the courier arrives before the order is ready (i.e. before the meal is cooked), then the courier will wait at the restaurant until the order is ready
    def get_task_type(self):
        pass

def CourierTaskList:
    def __init__(self):
        pass
    
    def append_task(self, new_task):
        pass
    
    def remove_task(self):
        pass
    
    ## This function is triggered whenever a new task is appended to the task list
    ## Requires solving a VRP with (soft) constraints on ddl
    def reorder_task_list(self):
        pass
    
    def get_current_task_list(self):
        pass

class FoodDeliverySimulation:
    def __init__(self):
        pass

    ## Components:
    ##  Courier states:
    ##      Type: Full time/part time
    ##      Task list:
    ##      Current location
    ##  Order states:
    ##      Status: In preparation, ready to pickup, enroute (no need to record delivered orders)
    ##      Origin: Restaurant location
    ##      Destination: Customer location
    ##      Remaining time to ddl
    def get_current_state(self):
        pass
    
    def get_current_time(self):
        pass

    ## Construct an efficient representation of the state vector
    def construct_state_vector(self):
        pass
    
    ## Construct an efficient representation of the action vector
    def construct_action_vector(self):
        pass

    ## Given an arbitrary policy function, the system extracts the order matching action generated by that policy and then perform state transitions
    ## Orders:
    ##  - Existing orders:
    ##      Status change, decrease remaining time to ddl by 1 time unit
    ##  - New orders arrive in the system
    ##  - Delivered orders exit the system
    ## Couriers:
    ##  - First, couriers being matched with an order choose to accept/reject it
    ##  - If accepted, append the new order into their task list and reorder the task list
    ##  - Couriers with non-empty task list travels to the direction of the first task in the list (i.e. to the restaurant if pickup, to the customer if deliver) by 1 unit distance
    ##  - Part-time couriers with empty task list exit the system
    ##  - New part-time couriers arrive into the system
    ##  - Full-time couriers with empty task list reposition (unclear for now)
    def state_transition(self, policy_func):
        state = self.get_current_state()
        time = self.get_current_time()
        order_courier_matching = policy_func(state, time)
        pass
